#!/usr/bin/ruby
#
# Timer to help apply David Allen's two minute rule to processing of a
# maildir-format email inbox.
# Copyright (C) 2014 Adam Spiers
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# ---------------------------------------------------------------------
#
# Briefly, the idea is that when processing your inbox, for each email
# you have a maximum of two minutes to either:
#
#   - perform any actions required by that email, or
#
#   - add any such actions to your TODO list, and move the email out
#     of the inbox.  (Best practice is to move it to an archive folder
#     and have a system for rapid retrieval of the email via the TODO
#     list item, e.g. via a hyperlink which will retrieve the email
#     based on its Message-Id: header, using an indexing mail search
#     engine.)
#
# This simple timer program constantly monitors the number of emails
# in the given maildir folder, and shows you how much of the two
# minutes you have left to process the item you are currently looking
# at.  Once you exceed the two minute budget, it will start beeping to
# prod you to adhere to the rule.
#
# So for example if you have 30 mails in your inbox, using this timer
# it should take you an absolute maximum of one hour to process them
# all ("process" in the sense defined within David Allen's GTD
# system).
#
# For mutt users, this approach can work nicely in conjunction with
#
#   https://github.com/aspiers/mutt.pub/blob/master/.mutt/common.d/96-GTD-FIFO
#
# which helps focus on a single mail thread at a time.
#
# Information on the two minute rule here:
#
#   http://www.success.com/article/1-on-1-david-allens-two-minute-rule
#   http://lifehacker.com/use-the-two-minute-rule-to-stop-procrastinating-and-get-1521792128
#
# ---------------------------------------------------------------------
#
# TODO list:
#
#   - Maybe display a cute ASCII progress bar, e.g.
#     https://github.com/jfelchner/ruby-progressbar
#
#   - Maybe also add optional support for a gtk UI or similar
#
#   - Add logging of each session, so that over time I can collect
#     statistics about how much mail I process, and how fast I am at
#     it.  This would help estimate how much time needs to be set
#     aside for processing mail, which is especially useful to know
#     when returning from vacation to a bulging inbox!

require 'open3'
require 'optparse'
require 'ostruct'

ME = File.basename($0)

def usage(opt_parser, error=nil)
  msg = opt_parser.help
  msg = error + "\n\n" + msg if error
  opt_parser.abort(msg)
end

def parse_args
  opts = OpenStruct.new
  opts.duration = 120 # 2 minute rule
  opts.maildir = nil
  opts.profile = nil
  opts.sleep = 2
  opts.target = 0  # what's the most mails we'll tolerate without nagging?

  opt_parser = OptionParser.new do |opt|
    opt.banner = "Usage: #{ME} [OPTIONS]"
    opt.on('-d', '--duration SECS', Integer,
           "number of seconds allowed per mail [#{opts.limit}]") do
      |duration|
      opts.duration = duration
    end
    opt.on('-m', '--maildir MAILDIR', String,
           "path to maildir to count") do
      |maildir|
      opts.maildir = maildir
    end
    opt.on('-c', '--command COMMAND', String,
           "name of command to run to count mailbox size") do
      |command|
      opts.command = command
    end
    opt.on('-s', '--sleep NUMBER', Integer,
           "seconds to sleep in between checks") do
      |sleep|
      opts.sleep = sleep
    end
    opt.on('-t', '--target NUMBER', Integer,
           "number of mails you are aiming to " +
           "reduce maildir to [#{opts.target}]") do
      |target|
      opts.target = target
    end

    opt.on('-h', '--help', 'Display this help') do
      puts opt_parser
      exit 0
    end
  end

  opt_parser.parse!

  unless !!opts.maildir ^ !!opts.command
    usage(opt_parser, "Must specify either --maildir or --command")
  end

  if opts.maildir
    maildir = opts.maildir
    dirs = [maildir] + %w(cur new tmp).map { |d| File.join(maildir, d) }
    unless dirs.all? { |d| File.directory? d }
      usage(opt_parser, "#{maildir} is not a valid maildir")
    end
    puts "Using maildir: #{maildir}"
  end

  return opts
end

def count_mailbox(opts)
  if opts.maildir
    count_maildir(opts.maildir)
  else
    stdout, stderr, status = Open3.capture3(opts.command)
    if status != 0
      $stderr.puts <<EOF
Command #{opts.command} failed with exit code #{status}!
STDOUT:
#{stdout}
STDERR:
#{stderr}
EOF
      return 99999999999
    end

    return stdout.chomp.to_i
  end
end

def count_maildir(maildir)
  Dir.glob("#{maildir}/{cur,new}/*").count { |file| File.file?(file) }
end

def beep
  print "\a"
end

def display(time_remaining, mail_count)
  puts "%s   %3d mails" % [mins_secs(time_remaining), mail_count]
end

def mins_secs(secs)
  extra_time = ""
  if secs.round < 0
    beep
    extra_time = "-"
    secs *= -1
  end
  minutes = secs.round / 60
  seconds = secs.round % 60
  "%s%d:%02d" % [extra_time, minutes, seconds]
end

def duration(secs)
  minutes = secs.round / 60
  seconds = secs.round % 60
  r = "#{seconds}s"
  r = "#{minutes}m " + r if minutes > 0
  r
end

def monitor_mailbox(opts)
  start_time = Time.now
  initial_mail_count = count_mailbox(opts)
  target = opts.target
  target_str = "%d mail%s" % [ target, target == 1 ? '' : 's' ]

  puts "Initial mail count is #{initial_mail_count}, target is #{target_str}"

  last_change = start_time
  last_mail_count = initial_mail_count
  while last_mail_count > target
    time_since_last_change = Time.now - last_change
    time_remaining = opts.duration - time_since_last_change
    mail_count = count_mailbox(opts)
    if mail_count < last_mail_count
      last_change = Time.now
      processed = last_mail_count - mail_count
      total_processed = initial_mail_count - mail_count
      total_elapsed = last_change - start_time
      average_velocity = total_elapsed / total_processed
      if mail_count > target
        puts "Processed %d mail%s in %ds!" %
          [ processed, processed == 1 ? '' : 's', time_since_last_change ]
        puts "Average velocity now %s per mail" % duration(average_velocity)
        expected_duration = average_velocity * mail_count
        eta = Time.now + expected_duration
        puts "At this rate you will hit your target of %s in %s, at %s" %
          [ target_str, duration(expected_duration), eta ]
      else
        if mail_count == 0
          puts "Congratulations, you emptied the mailbox!"
        else
          puts "Congratulations, you achieved your target of #{target_str}!"
        end
        puts "Average velocity was %s per mail" % duration(average_velocity)
        break
      end
      last_mail_count = mail_count
      next
    end
    last_mail_count = mail_count
    display(time_remaining, mail_count) if last_mail_count > target
    sleep opts.sleep
  end
end

def main
  opts = parse_args
  monitor_mailbox(opts)
end

main
