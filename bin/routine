#!/bin/bash

SOFT_CHECK_EVERY=300 # seconds
HARD_CHECK_EVERY=30  # seconds
#DEBUG=y

me=`basename $0`

usage () {
    exit_code=1
    if [[ "$1" == [0-9] ]]; then
        exit_code="$1"
        shift
    fi
    if [ -n "$1" ]; then
        echo "$*" >&2
        echo
    fi

    cat <<EOF >&2
Usage: $me [-n] HARD_THRESHOLD END_TIME
e.g. $me 12:30am 5am
     $me '11pm yesterday' 5am

Shuts down if the user is active after HARD_THRESHOLD.
Warns if the user is active before HARD_THRESHOLD.

-n means dry run - no shutdown performed.
EOF
    exit "$exit_code"
}

soft_warning_zone () {
    # Only remind if active in the last 5 minutes, or since
    # the program was launched, whichever is later.
    recent=`date +%s -d "5 minutes ago"`
    if [ "$recent" -lt "${soft#@}" ]; then
        recent="$soft"
    else
        recent="@$recent"
    fi
    out=$( active-since "$recent" ) || return

    if [ -n "$dryrun" ]; then
        action="would shutdown system if not in dry run mode"
    else
        action="will shutdown system"
    fi
    msg="WARNING: activity after $hard ($hard_epoch) $action!"
    #echo "$msg" | wall
    alertme "$msg"
    #echo "$msg" | write "`id -un`" "`uidle --tty`"
}

hard_action_zone () {
    out=$( active-since "$hard" ) || return

    if [ -z "$dryrun" ]; then
        sudo shutdown -h +1 "Get to bed, asswipe!
$out"
    else
        msg="Get to bed, asswipe!
$me running in dry run mode so won't initiate system shutdown.
$out"
        alertme "$msg" &
        wall "$msg"
    fi
}

# Allow this to be run from crontab every minute, to prevent
# sneaky "pkill bedtime" behaviour, since I know my willpower
# is weak...

# Only recent SUSE distributions have pgrep -c :-(
euid=`id -u`
search="bash $0"
#echo pgrep -u "$euid" -f \""$search"\"
#pgrep -u "$euid" -f "$search"
pids=$( pgrep -u "$euid" -f "$search" )
#echo "pids [$pids]"
#echo "$pids" | xargs -r -n1 ps -fp
num_pids=$( echo "$pids" | xargs -r -n1 | wc -l )
#echo $num_pids pids found
if [ $num_pids -ge 2 ]; then
    echo "$me already running; exiting."
    exit 0
elif [ $num_pids -eq 0 ]; then
    echo "BUG: didn't detect myself running"
    exit 255
fi

if [ "$1" == '-h' ] || [ "$1" == '--help' ]; then
    usage 0
fi

dryrun=
if [ "$1" == '-n' ]; then
    dryrun=true
    shift
fi

if [ $# -ne 2 ]; then
    usage
fi

# We assume that running this script means the caller wants immediate
# warnings about an approach hard threshold if there is an active session.
# So the soft threshold starts at the time the script is run.
#
# @$secs_since_epoch can be parsed by date -d, and hence
# accepted by active-since:
soft="`date +@%s`" 

hard="$1"
end="$2"

if ! end_epoch=`date +%s -d "$end"` ||
   ! hard_epoch=`date +%s -d "$hard"`; then
    echo
    usage
fi

if [ "$hard_epoch" -gt "$end_epoch" ]; then
    usage "HARD_THRESHOLD must come before END_TIME"
fi

while true; do
    now_epoch="`date +%s`"
    if [ -n "$DEBUG" ]; then
        cat <<EOF
now:  $now_epoch
hard: $hard_epoch
end:  $end_epoch
EOF
    fi

    if [ "$now_epoch" -ge "$end_epoch" ]; then
        echo "Could reasonably be awake now; stopping checks."
        exit 0
    fi

    if [ "$now_epoch" -ge "$hard_epoch" ]; then
        hard_action_zone
        sleep $HARD_CHECK_EVERY
    else
        soft_warning_zone
        sleep $SOFT_CHECK_EVERY
    fi
done
